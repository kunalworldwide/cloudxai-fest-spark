name: Build and deploy to gh-pages

on:
  push:
    branches:
      - main

# Give the workflow explicit permissions so the built-in GITHUB_TOKEN can push to `gh-pages`.
permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # allow actions to push back to the repo using the workflow token
          persist-credentials: true
          # fetch full history (useful for gh-pages action and commit metadata)
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: npm run build

      - name: Show built files (debug)
        run: |
          echo "Working dir: $(pwd)"
          echo "Contents of repo root:"
          ls -la
          echo "Contents of dist (if present):"
          ls -la dist || true

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages

  wait-for-https:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Wait for HTTPS to be enabled for cloudconf.ai
        id: wait_https
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const domain = 'cloudconf.ai';
            const maxAttempts = 20;
            const delayMs = 15000; // 15s

            function sleep(ms){ return new Promise(r=>setTimeout(r, ms)); }

            for(let i=0;i<maxAttempts;i++){
              const resp = await github.rest.repos.getPages({ owner, repo });
              const cname = resp.data.cname || '';
              const httpsEnforced = resp.data.https_enforced || false;
              if(cname === domain && httpsEnforced){
                return 'true';
              }
              await sleep(delayMs);
            }
            return 'false';

      - name: Create issue when HTTPS active
        if: steps.wait_https.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Pages: HTTPS enabled for cloudconf.ai',
              body: 'GitHub Pages has enabled HTTPS for cloudconf.ai and the site should now be available over HTTPS.'
            })
